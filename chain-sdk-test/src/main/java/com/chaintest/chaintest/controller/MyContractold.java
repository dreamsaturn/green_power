package com.chaintest.chaintest.controller;


import blockchain.Blockchain;
import com.chain.abi.FunctionReturnDecoder;
import com.chain.abi.TypeReference;
import com.chain.abi.Utils;
import com.chain.abi.datatypes.*;
import com.chain.abi.datatypes.generated.Bytes20;
import com.chain.abi.datatypes.generated.Bytes32;
import com.chain.abi.datatypes.generated.Uint32;
import com.chain.cloud.request.CallRequest;
import com.chain.cloud.request.DeployContractRequest;
import com.chain.cloud.request.SendRawTransactionRequest;
import com.chain.cloud.response.TransactionReceipt;
import com.chain.cloud.sdk.ChainCloudService;
import com.chain.cloud.sdk.ChannelConfig;
import org.bouncycastle.util.encoders.Hex;
//import com.chain.protocol.core.methods.request.Transaction;
//import common.Common;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;

public  class MyContractold {
    public static void main(String[] args) throws InterruptedException {
        // 连接链
        ChainCloudService chainCloudService = new ChainCloudService(
                new ChannelConfig("49.232.150.222", 30004),new ChannelConfig("49.232.150.222", 30005));

        // 部署合约
        DeployContractRequest request = new DeployContractRequest();
        // 合约编译生成的二进制
        request.setContractCode("0x608060405261000c61005b565b604051809103906000f080158015610028573d6000803e3d6000fd5b5060018054600160a060020a031916600160a060020a039290921691909117905534801561005557600080fd5b5061006b565b6040516104b2806104f783390190565b61047d8061007a6000396000f30060806040526004361061004b5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166312aaac708114610050578063d7042997146100dd575b600080fd5b34801561005c57600080fd5b5061006860043561013b565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100a257818101518382015260200161008a565b50505050905090810190601f1680156100cf5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156100e957600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261006895833595369560449491939091019190819084018382808284375094975061023c9650505050505050565b600154604080517fb971ad6200000000000000000000000000000000000000000000000000000000815260048101849052905160609273ffffffffffffffffffffffffffffffffffffffff169163b971ad6291602480830192600092919082900301818387803b1580156101ae57600080fd5b505af11580156101c2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156101eb57600080fd5b81019080805164010000000081111561020357600080fd5b8201602081018481111561021657600080fd5b815164010000000081118282018710171561023057600080fd5b50909695505050505050565b60607f0f436aa89c7f9e6198619634b0b2aec2ff1f9168c562cd8722df5e1a95aa74e2838360405180836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b838110156102ac578181015183820152602001610294565b50505050905090810190601f1680156102d95780820380516001836020036101000a031916815260200191505b50935050505060405180910390a1600154604080517fdd5b64de000000000000000000000000000000000000000000000000000000008152600481018681526024820192835285516044830152855173ffffffffffffffffffffffffffffffffffffffff9094169363dd5b64de938893889392606490910190602085019080838360005b8381101561037557818101518382015260200161035d565b50505050905090810190601f1680156103a25780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156103c257600080fd5b505af11580156103d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156103ff57600080fd5b81019080805164010000000081111561041757600080fd5b8201602081018481111561042a57600080fd5b815164010000000081118282018710171561044457600080fd5b50909796505050505050505600a165627a7a72305820ced6928d50493ad7baa240f4213412d69852c2b12d6ac6d550e7a6b2bd43cf0b0029608060405234801561001057600080fd5b50610492806100206000396000f3006080604052600436106100615763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d06d058114610066578063b971ad62146100d1578063dd5b64de1461015e578063f5440a5314610182575b600080fd5b34801561007257600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100bf94369492936024939284019190819084018382808284375094975061019a9650505050505050565b60408051918252519081900360200190f35b3480156100dd57600080fd5b506100e9600435610209565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012357818101518382015260200161010b565b50505050905090810190601f1680156101505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016a57600080fd5b506100e96004803590602480359081019101356102a8565b34801561018e57600080fd5b506100e9600435610331565b600080805b8351811015610202578060010184510360080260020a84828151811015156101c357fe5b6020910101517f01000000000000000000000000000000000000000000000000000000000000009081900481020460ff1602919091019060010161019f565b5092915050565b6000818152602081815260409182902080548351601f600261010060018516150260001901909316929092049182018490048402810184019094528084526060939283018282801561029c5780601f106102715761010080835404028352916020019161029c565b820191906000526020600020905b81548152906001019060200180831161027f57829003601f168201915b50505050509050919050565b60008381526020819052604090206060906102c49084846103cb565b506040805185815290517fd0348dd3087380ac2cc3132607e89bedeebeb2006a5fca18a411f4834ac0de1d9181900360200190a182828080601f01602080910402602001604051908101604052809392919081815260200183838082843750949998505050505050505050565b600060208181529181526040908190208054825160026001831615610100026000190190921691909104601f8101859004850282018501909352828152929091908301828280156103c35780601f10610398576101008083540402835291602001916103c3565b820191906000526020600020905b8154815290600101906020018083116103a657829003601f168201915b505050505081565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061040c5782800160ff19823516178555610439565b82800160010185558215610439579182015b8281111561043957823582559160200191906001019061041e565b50610445929150610449565b5090565b61046391905b80821115610445576000815560010161044f565b905600a165627a7a723058200cc867b1111dd31e7637de528527134cc74888608a4b1201b606e970565900390029");
        // 用户的私钥，用于交易时签名
        request.setPrivateKey("0x91d930fd4bf258faad2dbaa87908a16984efdee24a012275b6c2c87549deada9");
        String hash = chainCloudService.deployContract(request).getData();
//        String hash="03300ac8e1c2dbecece1fce1de99cf1aa6d52f551681f8e592cd8125729b5f74";
        System.out.println("deployContract: "+hash);
        // 发送交易后需要等一会再查询，可以写个简单的轮询
        Thread.sleep(6000);

        // 根据hash获取合约地址
        TransactionReceipt receipt= chainCloudService.getTransactionReceipt(hash).getData();
        String contractAddress = receipt.getContractAddress();
        System.out.println("contractAddress: "+contractAddress);

        // 调用合约存数据
        SendRawTransactionRequest sendRequest = new SendRawTransactionRequest();
        sendRequest.setContractAddress(contractAddress);
        sendRequest.setMethod("putKey");
        sendRequest.setPrivateKey("0x6fff1184b2705aadf170c7d9849ff5b9eab916513aed9f4d232de0024085554c");
        // 入参出参的类型，参考合约编译后生成的abi,按对应方法的对应字段的类型转，比如常见的string-->Utf8String
//        List<Type> inputParameters = Arrays.asList(new Bytes32(Hex.decode("6fff1184b2705aadf170c7d9849ff5b9eab916513aed9f4d232de0024085554c")),new Utf8String("I Love China!!"));
        List<Type> inputParameters = Arrays.asList(new Bytes32(Hex.decode("6fff1184b2705aadf170c7d9849ff5b9eab916513aed9f4d232de0024085554c")),new Utf8String("I Love China!!"));
//        List<Type> inputParameters = Arrays.asList(new Address("0x00a1809eeeec0a53d948300312eb647c6efbfc2c"),new Utf8String("Hello,World!"));
        sendRequest.setArgs(inputParameters);

        String hashTrans = chainCloudService.sendRawTransaction(sendRequest).getData();
        System.out.println("transactionHash: "+hashTrans);
        Thread.sleep(6000);

        // 根据hash查回执
        TransactionReceipt receipt2= chainCloudService.getTransactionReceipt(hashTrans).getData();
        // 查看是否有error
        System.out.println("ErrorMessage: "+receipt2.getErrorMessage());


        // 查询合约数据
        CallRequest callRequest = new CallRequest();
        callRequest.setSender("0x05f5091738ec0d3b1fd4238bb33927f769cd434f");
        callRequest.setContractAddress(contractAddress);
//        List<Type> inputParameters2 = Arrays.asList(new Address("0x00a1809eeeec0a53d948300312eb647c6efbfc2c"));
        List<Type> inputParameters2 = Arrays.asList(new Bytes32(Hex.decode("6fff1184b2705aadf170c7d9849ff5b9eab916513aed9f4d232de0024085554c")));
        List<TypeReference<?>> outputParameters = Arrays.asList(TypeReference.create(Utf8String.class));
        Function functionGet = new Function("getKey",inputParameters2,outputParameters);
        callRequest.setFunction(functionGet);
        String result = chainCloudService.call(callRequest).getData();
        List<Type> resultT = FunctionReturnDecoder.decode(result, Utils.convert(outputParameters));
        System.out.println("result: "+result);
    }
}
