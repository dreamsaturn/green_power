package com.chaintest.chaintest.controller;


import blockchain.Blockchain;
import com.chain.abi.FunctionReturnDecoder;
import com.chain.abi.TypeReference;
import com.chain.abi.Utils;
import com.chain.abi.datatypes.*;
import com.chain.abi.datatypes.generated.Bytes20;
import com.chain.abi.datatypes.generated.Bytes32;
import com.chain.abi.datatypes.generated.Uint32;
import com.chain.cloud.request.CallRequest;
import com.chain.cloud.request.DeployContractRequest;
import com.chain.cloud.request.SendRawTransactionRequest;
import com.chain.cloud.response.TransactionReceipt;
import com.chain.cloud.sdk.ChainCloudService;
import com.chain.cloud.sdk.ChannelConfig;
import org.bouncycastle.util.encoders.Hex;
//import com.chain.protocol.core.methods.request.Transaction;
//import common.Common;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;

public  class MyContractold {
    public static void main(String[] args) throws InterruptedException {
        // 连接链
        ChainCloudService chainCloudService = new ChainCloudService(
                new ChannelConfig("49.232.150.222", 30004),new ChannelConfig("49.232.150.222", 30005));

        // 部署合约
        DeployContractRequest request = new DeployContractRequest();
        // 合约编译生成的二进制
        request.setContractCode("0x608060405261000c61005b565b604051809103906000f080158015610028573d6000803e3d6000fd5b5060008054600160a060020a031916600160a060020a039290921691909117905534801561005557600080fd5b5061006b565b6040516104b28061069d83390190565b6106238061007a6000396000f3006080604052600436106100325763ffffffff60e060020a600035041663534464418114610037578063d37aec9214610143575b600080fd5b34801561004357600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100ce94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975061019c9650505050505050565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101085781810151838201526020016100f0565b50505050905090810190601f1680156101355780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014f57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100ce94369492936024939284019190819084018382808284375094975061047e9650505050505050565b60607fac862dbf4911d92b626d375872d1939948d59887ea10f39da67c6219d042a34d8383604051808060200180602001838103835285818151815260200191508051906020019080838360005b838110156102025781810151838201526020016101ea565b50505050905090810190601f16801561022f5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561026257818101518382015260200161024a565b50505050905090810190601f16801561028f5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1600054604051845173ffffffffffffffffffffffffffffffffffffffff9092169163dd5b64de91600291879190819060208401908083835b602083106102f55780518252601f1990920191602091820191016102d6565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015610336573d6000803e3d6000fd5b5050506040513d602081101561034b57600080fd5b50516040805160e060020a63ffffffff851602815260048101838152602482019283528751604483015287518893919260640190602085019080838360005b838110156103a257818101518382015260200161038a565b50505050905090810190601f1680156103cf5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156103ef57600080fd5b505af1158015610403573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561042c57600080fd5b81019080805164010000000081111561044457600080fd5b8201602081018481111561045757600080fd5b815164010000000081118282018710171561047157600080fd5b5090979650505050505050565b600054604051825160609273ffffffffffffffffffffffffffffffffffffffff169163b971ad62916002918691819060208401908083835b602083106104d55780518252601f1990920191602091820191016104b6565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015610516573d6000803e3d6000fd5b5050506040513d602081101561052b57600080fd5b50516040805160e060020a63ffffffff8516028152600481019290925251602480830192600092919082900301818387803b15801561056957600080fd5b505af115801561057d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156105a657600080fd5b8101908080516401000000008111156105be57600080fd5b820160208101848111156105d157600080fd5b81516401000000008111828201871017156105eb57600080fd5b509096955050505050505600a165627a7a72305820b3ad5b80756a7698512371c8ffa8b7d316ea18ba2ad540e315c4ace1edaf6b6e0029608060405234801561001057600080fd5b50610492806100206000396000f3006080604052600436106100615763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d06d058114610066578063b971ad62146100d1578063dd5b64de1461015e578063f5440a5314610182575b600080fd5b34801561007257600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100bf94369492936024939284019190819084018382808284375094975061019a9650505050505050565b60408051918252519081900360200190f35b3480156100dd57600080fd5b506100e9600435610209565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012357818101518382015260200161010b565b50505050905090810190601f1680156101505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016a57600080fd5b506100e96004803590602480359081019101356102a8565b34801561018e57600080fd5b506100e9600435610331565b600080805b8351811015610202578060010184510360080260020a84828151811015156101c357fe5b6020910101517f01000000000000000000000000000000000000000000000000000000000000009081900481020460ff1602919091019060010161019f565b5092915050565b6000818152602081815260409182902080548351601f600261010060018516150260001901909316929092049182018490048402810184019094528084526060939283018282801561029c5780601f106102715761010080835404028352916020019161029c565b820191906000526020600020905b81548152906001019060200180831161027f57829003601f168201915b50505050509050919050565b60008381526020819052604090206060906102c49084846103cb565b506040805185815290517fd0348dd3087380ac2cc3132607e89bedeebeb2006a5fca18a411f4834ac0de1d9181900360200190a182828080601f01602080910402602001604051908101604052809392919081815260200183838082843750949998505050505050505050565b600060208181529181526040908190208054825160026001831615610100026000190190921691909104601f8101859004850282018501909352828152929091908301828280156103c35780601f10610398576101008083540402835291602001916103c3565b820191906000526020600020905b8154815290600101906020018083116103a657829003601f168201915b505050505081565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061040c5782800160ff19823516178555610439565b82800160010185558215610439579182015b8281111561043957823582559160200191906001019061041e565b50610445929150610449565b5090565b61046391905b80821115610445576000815560010161044f565b905600a165627a7a7230582014990a595c121def67f7e3352f9ec3687da1b46f4358ae376c40a20c577d47b30029");
        // 用户的私钥，用于交易时签名
        request.setPrivateKey("0x91d930fd4bf258faad2dbaa87908a16984efdee24a012275b6c2c87549deada9");
//        String hash = chainCloudService.deployContract(request).getData();
        String hash="dc236aa3d57fe31598b7063a23479ef8489a3c1eb749537e48e6b6b5f793615a";
        System.out.println("deployContract receipt hash: "+hash);
        // 发送交易后需要等一会再查询，可以写个简单的轮询
        Thread.sleep(6000);

        // 根据hash获取合约地址
        TransactionReceipt receipt= chainCloudService.getTransactionReceipt(hash).getData();
        String contractAddress = receipt.getContractAddress();
        System.out.println("contractAddress: "+contractAddress);

        // 调用合约存数据
        SendRawTransactionRequest sendRequest = new SendRawTransactionRequest();
        sendRequest.setContractAddress(contractAddress);
        sendRequest.setMethod("putKey");
        sendRequest.setPrivateKey("0x6fff1184b2705aadf170c7d9849ff5b9eab916513aed9f4d232de0024085554c");
        // 入参出参的类型，参考合约编译后生成的abi,按对应方法的对应字段的类型转，比如常见的string-->Utf8String
//        List<Type> inputParameters = Arrays.asList(new Bytes32(Hex.decode("6fff1184b2705aadf170c7d9849ff5b9eab916513aed9f4d232de0024085554c")),new Utf8String("I Love China!!"));
        List<Type> inputParameters = Arrays.asList(new Utf8String("My belief"),new Utf8String("Green energy belongs to all mankind!!"));
//        List<Type> inputParameters = Arrays.asList(new Address("0x00a1809eeeec0a53d948300312eb647c6efbfc2c"),new Utf8String("Hello,World!"));
        sendRequest.setArgs(inputParameters);

        String hashTrans = chainCloudService.sendRawTransaction(sendRequest).getData();
        System.out.println("transactionHash receipt hash: "+hashTrans);
        Thread.sleep(6000);

        // 根据hash查回执
        TransactionReceipt receipt2= chainCloudService.getTransactionReceipt(hashTrans).getData();
        // 查看是否有error
        System.out.println("ErrorMessage: "+receipt2.getErrorMessage());


        // 查询合约数据
        CallRequest callRequest = new CallRequest();
        callRequest.setSender("0x05f5091738ec0d3b1fd4238bb33927f769cd434f");
        callRequest.setContractAddress(contractAddress);
//        List<Type> inputParameters2 = Arrays.asList(new Address("0x00a1809eeeec0a53d948300312eb647c6efbfc2c"));
        List<Type> inputParameters2 = Arrays.asList(new Utf8String("My belief"));
        List<TypeReference<?>> outputParameters = Arrays.asList(TypeReference.create(Utf8String.class));
        Function functionGet = new Function("getKey",inputParameters2,outputParameters);
        callRequest.setFunction(functionGet);
        String result = chainCloudService.call(callRequest).getData();
        List<Type> resultT = FunctionReturnDecoder.decode(result, Utils.convert(outputParameters));
        System.out.println("result: "+result);
    }
}
